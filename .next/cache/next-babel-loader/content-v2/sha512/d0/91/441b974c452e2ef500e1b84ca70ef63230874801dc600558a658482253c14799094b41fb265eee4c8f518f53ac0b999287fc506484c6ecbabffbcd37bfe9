{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment, useState } from 'react';\nimport Head from 'next/head';\nimport { MongoClient } from 'mongodb';\nimport classes from '../components/meetups/MeetupList.module.css';\nimport MeetupList from '../components/meetups/MeetupList';\nlet priceChanged = false;\nlet locationChanged = false;\nlet refinedMeetups;\n\nfunction HomePage(props) {\n  const locations = ['Amsterdam', 'Rotterdam'];\n  const {\n    0: checkedState,\n    1: setCheckedState\n  } = useState(new Array(locations.length).fill(false));\n  const {\n    0: search,\n    1: setSearch\n  } = useState(false);\n\n  const submitHandler = () => {\n    console.log(checkedState);\n    const requiredLocations = locations.filter((_, index) => {\n      console.log('inside button');\n      return checkedState[index];\n    });\n    console.log('after button');\n    console.log(requiredLocations);\n\n    if (locationChanged) {\n      console.log('inside locationchanged');\n      console.log(props.meetups);\n      refinedMeetups = props.meetups.filter(meetup => {\n        const locIndx = requiredLocations.findIndex(location => {\n          console.log(location);\n          console.log(meetup.price);\n          return meetup.price == location;\n        });\n        return locIndx > -1;\n      });\n      console.log(refinedMeetups);\n\n      async function addMeetupHandler() {\n        console.log('innside async hand');\n        const response = await fetch(`/api/new-meetup/${props.meetups[0].title}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n\n      addMeetupHandler(); // setSearch(true);\n    }\n  };\n\n  const handleOnChange = event => {\n    console.log(event);\n    console.log(event.target.name);\n\n    switch (event.target.name) {\n      case 'location':\n        {\n          locationChanged = true;\n          console.log('inside location');\n          const locIndex = locations.findIndex(location => {\n            console.log(location);\n            console.log(event.target.value);\n            return location == event.target.value;\n          });\n          console.log(locIndex);\n          const updatedCheckedState = checkedState.map((item, index) => index === locIndex ? !item : item);\n          setCheckedState(updatedCheckedState);\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.mainDiv,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.searchDiv,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Location\"\n          }), locations.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item\n            }), /*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"location\",\n                value: item,\n                checked: checkedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            })]\n          })), /*#__PURE__*/_jsx(\"button\", {\n            type: \"button\",\n            onClick: submitHandler,\n            children: \"Submit\"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Price\"\n          }), /*#__PURE__*/_jsxs(\"span\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: \"$100 to $1000\"\n            }), /*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"price\",\n                value: \"1000\",\n                checked: true,\n                onChange: handleOnChange\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"span\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: \"Greater than $1000\"\n            }), /*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"price\",\n                value: \"1001\",\n                checked: false,\n                onChange: handleOnChange\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            })]\n          })]\n        })]\n      }), !refinedMeetups && /*#__PURE__*/_jsx(MeetupList, {\n        meetups: props.meetups\n      }), refinedMeetups && /*#__PURE__*/_jsx(MeetupList, {\n        meetups: refinedMeetups\n      })]\n    })]\n  });\n} // export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   // fetch data from an API\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   };\n// }\n\n\nexport async function getStaticProps() {\n  console.log('inside static props'); // fetch data from an API\n\n  const client = await MongoClient.connect('mongodb+srv://NovaAnn:kwmwBi9wmLJ0nYBw@cluster0.nn0w8.mongodb.net/myNextDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        price: meetup.price,\n        location: meetup.location,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}