{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment, useState } from 'react';\nimport Head from 'next/head';\nimport { MongoClient } from 'mongodb';\nimport classes from '../components/meetups/MeetupList.module.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport MeetupList from '../components/meetups/MeetupList';\nlet priceChanged = false;\nlet locationChanged = false;\nlet tenantChanged = false;\nlet apartmentChanged = false;\nlet refinedMeetups;\nlet priceQueryArray = [];\nlet totQuery;\nlet requiredTenants = [];\nlet requiredApartment = [];\n\nfunction HomePage(props) {\n  console.log('inside HOme page');\n  console.log(props);\n  const locations = props.locationArray.map(item => {\n    return item._id;\n  });\n  const priceList = props.priceArray.map(item => {\n    return item._id;\n  });\n  const tenants = props.tenantArray.map(item => {\n    return item._id;\n  });\n  const apartment = props.apartmentArray.map(item => {\n    return item._id;\n  });\n  console.log('inside HOme page 2');\n  const {\n    0: checkedState,\n    1: setCheckedState\n  } = useState(new Array(locations.length).fill(true));\n  const {\n    0: pcheckedState,\n    1: psetCheckedState\n  } = useState(new Array(priceList.length).fill(true));\n  const {\n    0: tcheckedState,\n    1: tsetCheckedState\n  } = useState(new Array(tenants.length).fill(true));\n  const {\n    0: acheckedState,\n    1: asetCheckedState\n  } = useState(new Array(apartment.length).fill(true));\n  console.log('inside HOme page 3');\n  const {\n    0: search,\n    1: setSearch\n  } = useState(false);\n  const actualPriceList = [20000, 40000, 60000, 80000];\n\n  const commonFunction = array => {\n    console.log(array);\n    return array.map(price => {\n      const higherLim = actualPriceList.find(actPrice => {\n        return actPrice > price;\n      });\n\n      if (higherLim) {\n        return [price, higherLim];\n      } else {\n        return [price];\n      }\n    });\n  };\n\n  const priceArray = commonFunction(priceList);\n  console.log(priceArray);\n  console.log('inside HOme page 4');\n\n  const submitHandler = () => {\n    console.log(checkedState);\n    const requiredLocations = locations.filter((_, index) => {\n      console.log('inside button');\n      return checkedState[index];\n    });\n    const requiredPrices = priceList.filter((_, index) => {\n      console.log('inside button');\n      return pcheckedState[index];\n    });\n\n    if (tenants.length > 0) {\n      requiredTenants = tenants.filter((_, index) => {\n        console.log('inside button');\n        return tcheckedState[index];\n      });\n    }\n\n    if (apartment.length > 0) {\n      requiredApartment = apartment.filter((_, index) => {\n        console.log('inside button');\n        return acheckedState[index];\n      });\n    }\n\n    console.log('after button');\n    console.log(requiredLocations);\n    const locationQuery = {\n      price: {\n        $in: [...requiredLocations]\n      }\n    };\n    const tenantQuery = {\n      tenant: {\n        $in: [...requiredTenants]\n      }\n    };\n    const apartmentQuery = {\n      apartment: {\n        $in: [...requiredApartment]\n      }\n    };\n    console.log(locationQuery); //  if (locationChanged){\n    //   console.log('inside locationchanged');\n    //   console.log(props.meetups);\n    //   refinedMeetups = props.meetups.filter(meetup=>{\n    //     const locIndx = requiredLocations.findIndex(location=>{\n    //       console.log(location);\n    //       console.log(meetup.price);\n    //       return meetup.price == location\n    //     })\n    //     return locIndx > -1;\n    //   })\n    //   console.log(refinedMeetups);\n    // }\n\n    if (priceChanged) {\n      console.log('inside pricechanged');\n      console.log(requiredPrices);\n      const searchArray = commonFunction(requiredPrices); //   const searchArray = requiredPrices.map(price=>{\n      //     const higherLim = actualPriceList.find(actPrice=>{\n      //     return actPrice > price\n      //   })\n      //   if (higherLim){\n      //     return [price,higherLim]\n      //   } else {\n      //     return [price]\n      //   }\n      // }     \n      //     )\n\n      console.log(searchArray);\n      searchArray.forEach((element, i) => {\n        console.log('inside swarch array');\n        console.log(element);\n\n        if (element.length > 1) {\n          priceQueryArray[i] = {\n            $and: [{\n              \"$expr\": {\n                \"$gte\": [{\n                  \"$toInt\": \"$location\"\n                }, element[0]]\n              }\n            }, {\n              \"$expr\": {\n                \"$lte\": [{\n                  \"$toInt\": \"$location\"\n                }, element[1]]\n              }\n            }]\n          };\n        } else {\n          priceQueryArray[i] = {\n            \"$expr\": {\n              \"$gte\": [{\n                \"$toInt\": \"$location\"\n              }, element[0]]\n            }\n          };\n        }\n      });\n      const priceQuery = {\n        $or: [...priceQueryArray]\n      };\n      console.log(priceQuery);\n      totQuery = {\n        $and: [priceQuery, locationQuery, tenantQuery, apartmentQuery]\n      };\n      console.log('totQuery');\n      console.log(totQuery); // setSearch(true);\n    }\n\n    async function addMeetupHandler() {\n      console.log('innside async hand');\n      const url = '/api/' + props.meetups[0].price;\n      console.log(url);\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(totQuery),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseData = await response.json();\n      console.log('RESPONSE');\n      console.log(responseData);\n      console.log(responseData.result);\n    }\n\n    addMeetupHandler();\n  };\n\n  const handleOnChange = event => {\n    console.log(event);\n    console.log(event.target.name);\n\n    switch (event.target.name) {\n      case 'location':\n        {\n          locationChanged = true;\n          console.log('inside location');\n          const locIndex = locations.findIndex(location => {\n            console.log(location);\n            console.log(event.target.value);\n            return location == event.target.value;\n          });\n          console.log(locIndex);\n          const updatedCheckedState = checkedState.map((item, index) => index === locIndex ? !item : item);\n          setCheckedState(updatedCheckedState);\n        }\n\n      case 'tenant':\n        {\n          tenantChanged = true;\n          console.log('inside tenant');\n          const tenIndex = tenants.findIndex(location => {\n            console.log(location);\n            console.log(event.target.value);\n            return location == event.target.value;\n          });\n          console.log(tenIndex);\n          const tupdatedCheckedState = tcheckedState.map((item, index) => index === tenIndex ? !item : item);\n          tsetCheckedState(tupdatedCheckedState);\n        }\n\n      case 'apartment':\n        {\n          apartmentChanged = true;\n          console.log('inside apartment');\n          const aptIndex = apartment.findIndex(location => {\n            console.log(location);\n            console.log(event.target.value);\n            return location == event.target.value;\n          });\n          console.log(aptIndex);\n          const aupdatedCheckedState = acheckedState.map((item, index) => index === aptIndex ? !item : item);\n          asetCheckedState(aupdatedCheckedState);\n        }\n\n      case 'price':\n        {\n          priceChanged = true;\n          console.log('inside price');\n          const priceIndex = priceList.findIndex(location => {\n            console.log(location);\n            console.log(event.target.value);\n            return location == event.target.value;\n          });\n          console.log(priceIndex);\n          const pupdatedCheckedState = pcheckedState.map((item, index) => index === priceIndex ? !item : item);\n          psetCheckedState(pupdatedCheckedState);\n        }\n    }\n  };\n\n  console.log('inside HOme page 5');\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      }), /*#__PURE__*/_jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n      }), /*#__PURE__*/_jsx(\"script\", {\n        src: \"https://kit.fontawesome.com/fdba8ed509.js\",\n        crossorigin: \"anonymous\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.mainDiv,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.searchDiv,\n        children: [props.locationArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Location\"\n          }), props.locationArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"location\",\n                value: item._id,\n                checked: checkedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), props.priceArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Price\"\n          }), priceArray.map((item, index, arr) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"price\",\n                value: item[0],\n                checked: pcheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), item.length > 1 && /*#__PURE__*/_jsxs(\"span\", {\n              className: classes.h3Span,\n              children: [item[0], \" - \", item[1]]\n            }), item.length < 2 && /*#__PURE__*/_jsxs(\"span\", {\n              className: classes.h3Span,\n              children: [\"Greater than \", item[0]]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: props.priceArray[index].count\n            })]\n          }))]\n        }), props.tenantArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Tenant Allowed\"\n          }), props.tenantArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"tenant\",\n                value: item._id,\n                checked: tcheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), props.apartmentArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h3\", {\n            children: \"Apartment Type\"\n          }), props.apartmentArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"apartment\",\n                value: item._id,\n                checked: acheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          onClick: submitHandler,\n          children: \"Submit\"\n        })]\n      }), /*#__PURE__*/_jsx(MeetupList, {\n        meetups: props.meetups\n      })]\n    })]\n  });\n} // export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   // fetch data from an API\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   };\n// }\n\n\nexport async function getStaticProps() {\n  console.log('inside static props'); // fetch data from an API\n\n  const client = await MongoClient.connect('mongodb+srv://NovaAnn:kwmwBi9wmLJ0nYBw@cluster0.nn0w8.mongodb.net/myNextDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  const result2 = await meetupsCollection.aggregate([{\n    $project: {\n      title: 1,\n      image: 1,\n      item: 1,\n      address: 1,\n      price: 1,\n      location: 1,\n      description: 1,\n      priceInt: {\n        $toInt: \"$location\"\n      }\n    }\n  }, {\n    $facet: {\n      \"categorizedByLocation\": [{\n        $sortByCount: \"$price\"\n      }],\n      \"categorizedByPrice\": [{\n        $match: {\n          price: {\n            $exists: 1\n          }\n        }\n      }, {\n        $bucket: {\n          groupBy: \"$priceInt\",\n          boundaries: [0, 20000, 40000, 60000, 80000],\n          default: \"Other\",\n          output: {\n            \"count\": {\n              $sum: 1\n            },\n            \"titles\": {\n              $push: \"$title\"\n            }\n          }\n        }\n      }],\n      \"categorizedByTenant\": [{\n        $sortByCount: \"$tenant\"\n      }],\n      \"categorizedByApartment\": [{\n        $sortByCount: \"$apartment\"\n      }]\n    }\n  }]);\n  const yourData = await result2.next();\n  console.log(yourData.categorizedByPrice);\n  console.log(yourData.categorizedByLocation);\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        price: meetup.price,\n        location: meetup.location,\n        id: meetup._id.toString()\n      })),\n      priceArray: yourData.categorizedByPrice,\n      locationArray: yourData.categorizedByLocation,\n      tenantArray: yourData.categorizedByTenant,\n      apartmentArray: yourData.categorizedByApartment\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}