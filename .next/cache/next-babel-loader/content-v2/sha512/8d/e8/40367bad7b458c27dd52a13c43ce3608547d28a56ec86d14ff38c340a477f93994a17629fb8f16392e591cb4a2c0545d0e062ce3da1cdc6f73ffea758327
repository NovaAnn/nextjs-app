{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment, useState } from 'react';\nimport Head from 'next/head';\nimport { MongoClient } from 'mongodb';\nimport classes from '../components/meetups/MeetupList.module.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport MeetupList from '../components/meetups/MeetupList';\nlet priceChanged = false;\nlet locationChanged = false;\nlet tenantChanged = false;\nlet apartmentChanged = false;\nlet refinedMeetups = [];\nlet priceQueryArray = [];\nlet totQuery;\nlet requiredTenants = [];\nlet requiredApartment = [];\nlet searchMode = false;\n\nfunction HomePage(props) {\n  const locations = props.locationArray.map(item => {\n    return item._id;\n  });\n  const priceList = props.priceArray.map(item => {\n    return item._id;\n  });\n  const tenants = props.tenantArray.map(item => {\n    return item._id;\n  });\n  const apartment = props.apartmentArray.map(item => {\n    return item._id;\n  });\n  const {\n    0: checkedState,\n    1: setCheckedState\n  } = useState(new Array(locations.length).fill(true));\n  const {\n    0: pcheckedState,\n    1: psetCheckedState\n  } = useState(new Array(priceList.length).fill(true));\n  const {\n    0: tcheckedState,\n    1: tsetCheckedState\n  } = useState(new Array(tenants.length).fill(true));\n  const {\n    0: acheckedState,\n    1: asetCheckedState\n  } = useState(new Array(apartment.length).fill(true));\n  const {\n    0: search,\n    1: setSearch\n  } = useState(false);\n  const {\n    0: checking,\n    1: setChecking\n  } = useState(false);\n  const actualPriceList = [20000, 40000, 60000, 80000];\n\n  const commonFunction = array => {\n    return array.map(price => {\n      const higherLim = actualPriceList.find(actPrice => {\n        return actPrice > price;\n      });\n\n      if (higherLim) {\n        return [price, higherLim];\n      } else {\n        return [price];\n      }\n    });\n  };\n\n  const priceArray = commonFunction(priceList);\n\n  const submitHandler = () => {\n    refinedMeetups = [];\n    searchMode = true;\n    setChecking(true);\n    const requiredLocations = locations.filter((_, index) => {\n      return checkedState[index];\n    });\n    const requiredPrices = priceList.filter((_, index) => {\n      return pcheckedState[index];\n    });\n\n    if (tenants.length > 0) {\n      requiredTenants = tenants.filter((_, index) => {\n        return tcheckedState[index];\n      });\n    }\n\n    if (apartment.length > 0) {\n      requiredApartment = apartment.filter((_, index) => {\n        return acheckedState[index];\n      });\n    }\n\n    const locationQuery = {\n      price: {\n        $in: [...requiredLocations]\n      }\n    };\n    const tenantQuery = {\n      tenant: {\n        $in: [...requiredTenants]\n      }\n    };\n    const apartmentQuery = {\n      apartment: {\n        $in: [...requiredApartment]\n      }\n    };\n    const searchArray = commonFunction(requiredPrices);\n    searchArray.forEach((element, i) => {\n      if (element.length > 1) {\n        priceQueryArray[i] = {\n          $and: [{\n            \"$expr\": {\n              \"$gte\": [{\n                \"$toInt\": \"$location\"\n              }, element[0]]\n            }\n          }, {\n            \"$expr\": {\n              \"$lte\": [{\n                \"$toInt\": \"$location\"\n              }, element[1]]\n            }\n          }]\n        };\n      } else {\n        priceQueryArray[i] = {\n          \"$expr\": {\n            \"$gte\": [{\n              \"$toInt\": \"$location\"\n            }, 80000]\n          }\n        };\n      }\n    });\n    const priceQuery = {\n      $or: [...priceQueryArray]\n    };\n    totQuery = {\n      $and: [priceQuery, locationQuery, tenantQuery, apartmentQuery]\n    };\n\n    async function addMeetupHandler() {\n      const url = '/api/' + props.meetups[0].price;\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(totQuery),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseData = await response.json();\n\n      if (responseData.result) {\n        refinedMeetups = responseData.result;\n        setChecking(false);\n      }\n    }\n\n    addMeetupHandler();\n  };\n\n  const handleOnChange = event => {\n    switch (event.target.name) {\n      case 'location':\n        {\n          locationChanged = true;\n          const locIndex = locations.findIndex(location => {\n            return location == event.target.value;\n          });\n          const updatedCheckedState = checkedState.map((item, index) => index === locIndex ? !item : item);\n          setCheckedState(updatedCheckedState);\n        }\n\n      case 'tenant':\n        {\n          tenantChanged = true;\n          const tenIndex = tenants.findIndex(location => {\n            return location == event.target.value;\n          });\n          const tupdatedCheckedState = tcheckedState.map((item, index) => index === tenIndex ? !item : item);\n          tsetCheckedState(tupdatedCheckedState);\n        }\n\n      case 'apartment':\n        {\n          apartmentChanged = true;\n          const aptIndex = apartment.findIndex(location => {\n            return location == event.target.value;\n          });\n          const aupdatedCheckedState = acheckedState.map((item, index) => index === aptIndex ? !item : item);\n          asetCheckedState(aupdatedCheckedState);\n        }\n\n      case 'price':\n        {\n          priceChanged = true;\n          const priceIndex = priceList.findIndex(location => {\n            return location == event.target.value;\n          });\n          const pupdatedCheckedState = pcheckedState.map((item, index) => index === priceIndex ? !item : item);\n          psetCheckedState(pupdatedCheckedState);\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      }), /*#__PURE__*/_jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n      }), /*#__PURE__*/_jsx(\"script\", {\n        src: \"https://kit.fontawesome.com/fdba8ed509.js\",\n        crossorigin: \"anonymous\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.mainDiv,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: classes.searchDiv,\n        children: [props.locationArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: \"Location\"\n          }), props.locationArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"location\",\n                value: item._id,\n                checked: checkedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), props.priceArray && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: \"Price\"\n          }), priceArray.map((item, index, arr) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"price\",\n                value: item[0] == \"Other\" ? 80000 : item[0],\n                checked: pcheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), item.length > 1 && /*#__PURE__*/_jsxs(\"span\", {\n              className: classes.h3Span,\n              children: [\"$\", item[0], \" - $\", item[1]]\n            }), item.length < 2 && /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: \"Greater than $80000\"\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: props.priceArray[index].count\n            })]\n          }))]\n        }), props.tenantArray && props.tenantArray[0]._id && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: \"Tenant Allowed\"\n          }), props.tenantArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"tenant\",\n                value: item._id,\n                checked: tcheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), props.apartmentArray && props.apartmentArray[0]._id && /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.searchItem,\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: \"Apartment Type\"\n          }), props.apartmentArray.map((item, index) => /*#__PURE__*/_jsxs(\"span\", {\n            className: classes.indSpan,\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              className: classes.switch,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"checkbox\",\n                name: \"apartment\",\n                value: item._id,\n                checked: acheckedState[index],\n                onChange: handleOnChange.bind(index)\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: classes.slider\n              })]\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Span,\n              children: item._id\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: classes.h3Count,\n              children: item.count\n            })]\n          }))]\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          onClick: submitHandler,\n          children: \"Search\"\n        })]\n      }), !checking && refinedMeetups && refinedMeetups.length > 0 && /*#__PURE__*/_jsx(MeetupList, {\n        meetups: refinedMeetups\n      }), !searchMode && /*#__PURE__*/_jsx(MeetupList, {\n        meetups: props.meetups\n      }), !checking && searchMode && refinedMeetups && refinedMeetups.length < 1 && /*#__PURE__*/_jsx(\"div\", {\n        className: classes.pDiv,\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"No Results Found\"\n        })\n      }), checking && searchMode && refinedMeetups.length < 1 && /*#__PURE__*/_jsx(\"div\", {\n        className: classes.pDiv,\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"Searching...\"\n        })\n      })]\n    })]\n  });\n}\n\nexport async function getStaticProps() {\n  // fetch data from an API\n  const client = await MongoClient.connect('mongodb+srv://NovaAnn:kwmwBi9wmLJ0nYBw@cluster0.nn0w8.mongodb.net/myNextDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  const result2 = await meetupsCollection.aggregate([{\n    $project: {\n      title: 1,\n      image: 1,\n      item: 1,\n      address: 1,\n      price: 1,\n      location: 1,\n      tenant: 1,\n      apartment: 1,\n      description: 1,\n      priceInt: {\n        $toInt: \"$location\"\n      }\n    }\n  }, {\n    $facet: {\n      \"categorizedByLocation\": [{\n        $sortByCount: \"$price\"\n      }],\n      \"categorizedByTenant\": [{\n        $sortByCount: \"$tenant\"\n      }],\n      \"categorizedByApartment\": [{\n        $sortByCount: \"$apartment\"\n      }],\n      \"categorizedByPrice\": [{\n        $match: {\n          price: {\n            $exists: 1\n          }\n        }\n      }, {\n        $bucket: {\n          groupBy: \"$priceInt\",\n          boundaries: [0, 20000, 40000, 60000, 80000],\n          default: \"Other\",\n          output: {\n            \"count\": {\n              $sum: 1\n            },\n            \"titles\": {\n              $push: \"$title\"\n            }\n          }\n        }\n      }]\n    }\n  }]);\n  const yourData = await result2.next();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        price: meetup.price,\n        contact: meetup.contact,\n        apartment: meetup.apartment,\n        tenant: meetup.tenant,\n        location: meetup.location,\n        cooler: meetup.cooler,\n        microwave: meetup.microwave,\n        refrigerator: meetup.refrigerator,\n        heater: meetup.heater,\n        description: meetup.description,\n        id: meetup._id.toString()\n      })),\n      priceArray: yourData.categorizedByPrice,\n      locationArray: yourData.categorizedByLocation,\n      tenantArray: yourData.categorizedByTenant,\n      apartmentArray: yourData.categorizedByApartment\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}